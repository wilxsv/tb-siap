<?php

namespace Minsal\SeguimientoBundle\Repositorio;

use Doctrine\ORM\EntityRepository;

/**
 * SecSolicitudestudiosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SecSolicitudestudiosRepository extends EntityRepository {
    /*
     * DESCRIPCIÓN: Método que obtiene los datos de la solicitud de estudio de laboratorio.
     * PARÁMETROS DE ENTRADA:
     *                  -idHistorialClinico: id de la historia clinica de la que se desea buscar la solicitud de estudio.
     *                  -idDatoReferencia: id del Dato Referencia para pacientes externos, de la que se desa buscar la solicitud de estudio.
     *                  -idEstablecimiento: id del establecimiento que ha solicitado los examenes de laboratorio.
     * RETORNA:
     *                  -los datos de la solicitud de estudio, con su respectivo detalle.
     */
    public function obtenerSolicitudEstudios($idHistorialClinico, $idDatoReferencia, $idEstablecimiento, $idEstado = 0) {
        $em   = $this->getEntityManager();
        $conn = $em->getConnection();

        $sql = "SELECT t01.idsolicitudestudio,
                       t01.id AS iddetalle,
                       t02.impresiones,
                       t04.id_area_servicio_diagnostico AS idarea,
                       t05.idarea AS codigoarea,
                       t05.nombrearea,
                       t01.id_conf_examen_estab AS idexamen,
                       t03.codigo_examen AS codigoexamen,
                       t03.nombre_examen AS nombreexamen,
                       t01.idtipomuestra,
                       t07.tipomuestra AS nombremuestra,
                       t01.idorigenmuestra,
                       t08.origenmuestra AS nombreorigenmuestra,
                       t01.indicacion,
                       t02.idtiposolicitud,
                       CASE t03.urgente WHEN 0
                            THEN 'false'
                            ELSE 'true'
                       END AS urgente,
                       t06.id_atencion AS idprograma,
                       t01.estadodetalle AS idestadodetalle,
                       t09.idestado AS codigoestadodetalle,
                       t03.idplantilla
                FROM sec_detallesolicitudestudios          t01
                INNER JOIN sec_solicitudestudios           t02 ON (t02.id = t01.idsolicitudestudio)
                INNER JOIN lab_conf_examen_estab           t03 ON (t03.id = t01.id_conf_examen_estab)
                INNER JOIN mnt_area_examen_establecimiento t04 ON (t04.id = t03.idexamen)
                INNER JOIN ctl_area_servicio_diagnostico   t05 ON (t05.id = t04.id_area_servicio_diagnostico)
                LEFT  JOIN mnt_formulariosxestablecimiento t06 ON (t06.id = t03.idformulario)
                LEFT  JOIN lab_tipomuestra                 t07 ON (t07.id = t01.idtipomuestra)
                LEFT  JOIN mnt_origenmuestra               t08 ON (t08.id = t01.idorigenmuestra)
                LEFT  JOIN ctl_estado_servicio_diagnostico t09 ON (t09.id = t01.estadodetalle)
                WHERE CASE WHEN :idHistorialClinico::integer IS NOT NULL
                        THEN t02.id_historial_clinico = :idHistorialClinico
                        ELSE t02.id_dato_referencia = :idDatoReferencia
                      END
                    AND t02.id_establecimiento_externo = :idEstablecimiento
                    AND (t02.idtiposolicitud = 1 OR t02.idtiposolicitud = 2)
                    AND t02.estado != :idEstado";

        $stm = $conn->prepare($sql);
        $stm->bindValue(':idHistorialClinico', $idHistorialClinico);
        $stm->bindValue(':idDatoReferencia', $idDatoReferencia);
        $stm->bindValue(':idEstablecimiento', $idEstablecimiento);
        $stm->bindValue(':idEstado', $idEstado);
        $stm->execute();
        $result = $stm->fetchAll();

        return $result;
    }

    /*
     * DESCRIPCIÓN: Método que obtiene los datos generales de la solicitud de estudios,
     *              utilizadas en la impresion de plantillas, asi como en la insersion de resultados de las plantillas.
     * PARÁMETROS DE ENTRADA:
     *                  -idHistorialClinico: id del Historial Clinico, por medio del cual se desean obetener los datos generales de la solicitud.
     *                  -idDatoReferencia:   id del Dato Referencia para pacientes externos, id por medio del cual se desa obtener los datos generales de la solicitud.
     *                  -idEstablecimiento:  id del establecimiento que ha solicitado los examenes de laboratorio.
     * RETORNA:
     *                  -los datos generales de la solicitud.
     */
    public function obtenerDatosGenerales($idHistorialClinico, $idDatoReferencia, $idEstablecimiento) {
        $em   = $this->getEntityManager();
        $conn = $em->getConnection();

        $sql = "WITH tbl_servicio AS (
                    SELECT t02.id,
                        CASE WHEN t02.nombre_ambiente IS NOT NULL THEN
                            CASE WHEN id_servicio_externo_estab IS NOT NULL THEN t05.abreviatura ||'-->' ||t02.nombre_ambiente
                                 ELSE t02.nombre_ambiente
                            END
                        ELSE
                            CASE WHEN id_servicio_externo_estab IS NOT NULL THEN t05.abreviatura ||'--> ' || t01.nombre
                                 WHEN not exists (select nombre_ambiente from mnt_aten_area_mod_estab where nombre_ambiente=t01.nombre) THEN t01.nombre
                            END
                        END AS servicio
                    FROM  ctl_atencion                  t01
                    INNER JOIN mnt_aten_area_mod_estab              t02 ON (t01.id = t02.id_atencion)
                    INNER JOIN mnt_area_mod_estab           t03 ON (t03.id = t02.id_area_mod_estab)
                    LEFT  JOIN mnt_servicio_externo_establecimiento t04 ON (t04.id = t03.id_servicio_externo_estab)
                    LEFT  JOIN mnt_servicio_externo             t05 ON (t05.id = t04.id_servicio_externo)
                    WHERE t02.id_establecimiento = :idEstablecimiento
                    ORDER BY 2)

                SELECT DISTINCT t02.nombre AS nombre_establecimiento,
                       TO_CHAR(t01.fecha_solicitud, 'DD/MM/YYYY') AS fecha_solicitud,
                       CASE WHEN t03.id IS NOT NULL
                            THEN t04.numero
                            ELSE t13.numero
                       END AS numero_expediente,
                       CASE WHEN t03.id IS NOT NULL
                            THEN CONCAT_WS(' ',t05.primer_nombre,t05.segundo_nombre,t05.tercer_nombre,t05.primer_apellido,t05.segundo_apellido,t05.apellido_casada)
                            ELSE CONCAT_WS(' ',t14.primer_nombre,t14.segundo_nombre,t14.tercer_nombre,t14.primer_apellido,t14.segundo_apellido,t14.apellido_casada)
                       END AS nombre_paciente,
                       CASE WHEN t03.id IS NOT NULL
                            THEN t06.id
                            ELSE t15.id
                       END AS id_sexo,
                       CASE WHEN t03.id IS NOT NULL
                            THEN t06.nombre
                            ELSE t15.nombre
                       END AS nombre_sexo,
                       CASE WHEN t03.id IS NOT NULL
                            THEN (DATE(CURRENT_DATE)  - t05.fecha_nacimiento)
                            ELSE (DATE(CURRENT_DATE)  - t14.fecha_nacimiento)
                       END AS edad_dias,
                       CASE WHEN t03.id IS NOT NULL
                            THEN t10.nombre
                            ELSE t19.nombre
                       END AS procedencia,
                       CASE WHEN t03.id IS NOT NULL
                            THEN t08.servicio
                            ELSE t17.servicio
                       END AS servicio,
                       CASE WHEN t03.id IS NOT NULL
                            THEN t11.nombreempleado
                            ELSE t20.nombreempleado
                       END AS nombre_empleado
                FROM sec_solicitudestudios          t01
                INNER JOIN ctl_establecimiento     t02 ON (t02.id = t01.id_establecimiento_externo)
                -- Historial Clinico
                LEFT  JOIN sec_historial_clinico   t03 ON (t03.id = t01.id_historial_clinico)
                LEFT  JOIN mnt_expediente          t04 ON (t04.id = t03.id_numero_expediente)
                LEFT  JOIN mnt_paciente            t05 ON (t05.id = t04.id_paciente)
                LEFT  JOIN ctl_sexo                t06 ON (t06.id = t05.id_sexo)
                LEFT  JOIN mnt_aten_area_mod_estab t07 ON (t07.id = t03.idsubservicio)
                LEFT  JOIN tbl_servicio            t08 ON (t08.id = t07.id AND t08.servicio IS NOT NULL)
                LEFT  JOIN mnt_area_mod_estab      t09 ON (t09.id = t07.id_area_mod_estab)
                LEFT  JOIN ctl_area_atencion       t10 ON (t10.id = t09.id_area_atencion)
                LEFT  JOIN mnt_empleado            t11 ON (t11.id = t03.id_empleado)
                -- Paciente Referido
                LEFT  JOIN mnt_dato_referencia     t12 ON (t12.id = t01.id_dato_referencia)
                LEFT  JOIN mnt_expediente_referido t13 ON (t13.id = t12.id_expediente_referido)
                LEFT  JOIN mnt_paciente_referido   t14 ON (t14.id = t13.id_referido)
                LEFT  JOIN ctl_sexo                t15 ON (t15.id = t14.id_sexo)
                LEFT  JOIN mnt_aten_area_mod_estab t16 ON (t16.id = t12.id_aten_area_mod_estab)
                LEFT  JOIN tbl_servicio            t17 ON (t17.id = t16.id AND t17.servicio IS NOT NULL)
                LEFT  JOIN mnt_area_mod_estab      t18 ON (t18.id = t16.id_area_mod_estab)
                LEFT  JOIN ctl_area_atencion       t19 ON (t19.id = t18.id_area_atencion)
                LEFT  JOIN mnt_empleado            t20 ON (t20.id = t12.id_empleado)
                WHERE CASE WHEN :idHistorialClinico::integer != 0
                        THEN t03.id = :idHistorialClinico
                        ELSE t12.id = :idDatoReferencia
                      END
                    AND t01.id_establecimiento = :idEstablecimiento";

        $stm = $conn->prepare($sql);
        $stm->bindValue(':idHistorialClinico', $idHistorialClinico);
        $stm->bindValue(':idDatoReferencia', $idDatoReferencia);
        $stm->bindValue(':idEstablecimiento', $idEstablecimiento);
        $stm->execute();
        $result = $stm->fetchAll();
        return $result;
    }

    /*
     * DESCRIPCIÓN: Método que permite obtener los resultados de los examenes de la solicitud de estudio de laboratorio
     *
     * PARÁMETROS DE ENTRADA:
     *                  -idHistorialClinico: id del HistorialClinico que generó la solicitud de estudios de laboratorio.
     *                  -idDatoReferencia:   id del DatoReferencia (para pacientes externos - referidos) que generó la solicitud de estudios.
     *                  -idEstablecimiento:  id del establecimiento que ha solicitado los examenes de laboratorio.
     * RETORNA:
     *                  -Los resultados de los examenes asociados a una solicitud de estudio.
     */
    public function obtenerResultadoSolicitudExamen($idHistorialClinico, $idDatoReferencia, $idEstablecimiento) {
        $em   = $this->getEntityManager();
        $conn = $em->getConnection();

        $sql = "SELECT DISTINCT t05.id AS id_area,
                       t05.idarea AS codigo_area,
                       t05.nombrearea AS nombre_area,
                       t10.id AS id_plantilla,
                       t10.idplantilla AS codigo_plantilla,
                       t10.plantilla AS nombre_plantilla,
                       t06.id AS id_examen,
                       t06.idestandar AS codigo_examen,
                       t03.nombre_examen,
                       t07.id AS id_estado_solicitud,
                       t07.idestado AS codigo_estado_solicitud,
                       t07.descripcion AS nombre_estado_solicitud,
                       t08.id AS id_estado_detalle,
                       t08.idestado AS codigo_estado_detalle,
                       t08.descripcion AS nombre_estado_detalle,
                       t01.observacion AS detalle_observacion,
                       t01.f_tomamuestra AS fecha_toma_muestra,
                       t25.id AS id_empleado,
                       t25.nombreempleado AS nombre_empleado,
                       t26.id AS id_estado_rechazo,
                       t26.estado AS nombre_estado_rechazo,
                       t27.id AS id_observacion_rechazo,
                       t27.posible_observacion AS nombre_observacion_rechazo,
                       TO_CHAR(t17.fecha_resultado, 'dd/mm/yyyy') AS fecha_resultado,
                       CASE WHEN t03.urgente = 1 AND t02.estado = 1
                            THEN 'SI'
                            ELSE 'NO'
                       END AS urgente,
                       t17.id AS id_resultado,
                       t17.resultado,
                       t17.lectura,
                       t17.interpretacion,
                       t17.observacion AS resultado_observacion,
                       t18.id AS id_posible_resultado,
                       t18.posible_resultado AS nombre_posible_resultado,
                       CASE t10.idplantilla WHEN 'B'
                            THEN NULL
                            ELSE t19.unidades
                       END AS unidades,
                       CASE t10.idplantilla WHEN 'B'
                            THEN NULL
                            ELSE t19.rangoinicio
                       END AS rango_inicio,
                       CASE t10.idplantilla WHEN 'B'
                            THEN NULL
                            ELSE t19.rangofin
                       END AS rango_fin,
                       t20.id_elemento,
                       t20.nombre_elemento,
                       t20.id_resultado_elemento,
                       t20.id_detalleresultado_elemento,
                       t20.resultado_elemento,
                       t20.id_posible_resultado_elemento,
                       t20.nombre_posible_resultado_elemento,
                       t20.unidad_elemento,
                       t20.control_normal_elemento,
                       t20.pb_elemento_orden,
                       t20.id_subelemento,
                       t20.nombre_subelemento,
                       t20.id_resultado_subelemento,
                       t20.id_detalleresultado_subelemento,
                       t20.resultado_subelemento,
                       t20.id_posible_resultado_subelemento,
                       t20.nombre_posible_resultado_subelemento,
                       t20.unidad_subelemento,
                       t20.rango_inicio_subelemento,
                       t20.rango_fin_subelemento,
                       t20.control_normal_subelemento,
                       t20.pb_subelemento_orden,
                       /*t21.id_elemento_tincion,
                       t21.nombre_elemento_tincion,
                       t21.id_cantidad_tincion,
                       t21.nombre_cantidad_tincion,*/
                       t22.id_procedimiento,
                       t22.nombre_procedimiento,
                       t22.unidad_procedimiento,
                       t22.rango_inicio_procedimiento,
                       t22.rango_fin_procedimiento,
                       t22.resultado_procedimiento,
                       t22.id_posible_resultado_procedimiento,
                       t22.nombre_posible_resultado_procedimiento,
                       t22.control_diario_procedimiento,
                       t23.id_bacteria,
                       t23.nombre_bacteria,
                       t23.cantidad_bacterias,
                       t24.id AS id_observacion_bacteria,
                       t24.observacion AS nombre_observacion_bacteria,
                       t24.tiporespuesta AS codigo_observacion_bacteria,
                       t23.id_tarjeta,
                       t23.nombre_tarjeta,
                       t23.id_antibiotico,
                       t23.nombre_antibiotico,
                       t23.id_resultado_antibiotico,
                       t23.resultado_antibiotico,
                       t23.lectura_antibiotico,
                       t23.id_posible_resultado_antibiotico,
                       t23.nombre_posible_resultado_antibiotico
                FROM sec_detallesolicitudestudios          t01
                INNER JOIN sec_solicitudestudios           t02 ON (t02.id = t01.idsolicitudestudio)
                INNER JOIN lab_conf_examen_estab           t03 ON (t03.id = t01.id_conf_examen_estab)
                INNER JOIN mnt_area_examen_establecimiento t04 ON (t04.id = t03.idexamen)
                INNER JOIN ctl_area_servicio_diagnostico   t05 ON (t05.id = t04.id_area_servicio_diagnostico)
                INNER JOIN ctl_examen_servicio_diagnostico t06 ON (t06.id = t04.id_examen_servicio_diagnostico)
                INNER JOIN ctl_estado_servicio_diagnostico t07 ON (t07.id = t02.estado)
                INNER JOIN ctl_estado_servicio_diagnostico t08 ON (t08.id = t01.estadodetalle)
                INNER JOIN mnt_empleado                    t09 ON (t09.id = t01.idempleado)
                INNER JOIN lab_plantilla                   t10 ON (t10.id = t03.idplantilla)
                LEFT  JOIN sec_historial_clinico           t11 ON (t11.id = t02.id_historial_clinico)
                LEFT  JOIN mnt_expediente                  t12 ON (t12.id = t11.id_numero_expediente)
                LEFT  JOIN mnt_paciente                    t13 ON (t13.id = t12.id_paciente)
                LEFT  JOIN mnt_dato_referencia             t14 ON (t14.id = t02.id_dato_referencia)
                LEFT  JOIN mnt_expediente_referido         t15 ON (t15.id = t14.id_expediente_referido)
                LEFT  JOIN mnt_paciente_referido           t16 ON (t16.id = t15.id_referido)
                LEFT  JOIN lab_resultados                  t17 ON (t01.id = t17.iddetallesolicitud)
                LEFT  JOIN lab_posible_resultado           t18 ON (t18.id = t17.id_posible_resultado)
                LEFT  JOIN lab_datosfijosresultado         t19 ON (t03.id = t19.id_conf_examen_estab
                        AND (t19.idsexo IS NULL OR t19.idsexo = CASE WHEN t11.id IS NOT NULL THEN t13.id_sexo ELSE t16.id_sexo END)
                        AND (t19.idedad = 4 OR t19.idedad = (
                                    SELECT id
                                    FROM ctl_rango_edad
                                    WHERE (DATE(CURRENT_DATE) - CASE WHEN t11.id IS NOT NULL THEN t13.fecha_nacimiento ELSE t16.fecha_nacimiento END BETWEEN edad_minima_dias AND edad_maxima_dias)
                                    AND cod_modulo = 'LAB'
                                    AND id != 4
                                )
                            )
                        AND t19.fechafin IS NULL
                    )
                LEFT JOIN (
                    SELECT ti01.id AS id_elemento,
                           ti01.elemento AS nombre_elemento,
                           ti01.unidadelem AS unidad_elemento,
                           ti04.resultado AS resultado_elemento,
                           ti04.observacion AS control_normal_elemento,
                           ti04.idresultado AS id_resultado_elemento,
                           ti04.id AS id_detalleresultado_elemento,
                           ti06.id AS id_posible_resultado_elemento,
                           ti06.posible_resultado AS nombre_posible_resultado_elemento,
                           ti01.orden AS pb_elemento_orden,
                           ti02.id AS id_subelemento,
                           ti02.subelemento AS nombre_subelemento,
                           ti02.unidad AS unidad_subelemento,
                           ti02.rangoinicio AS rango_inicio_subelemento,
                           ti02.rangofin AS rango_fin_subelemento,
                           ti03.resultado AS resultado_subelemento,
                           ti03.observacion AS control_normal_subelemento,
                           ti03.idresultado AS id_resultado_subelemento,
                           ti03.id AS id_detalleresultado_subelemento,
                           ti05.id AS id_posible_resultado_subelemento,
                           ti05.posible_resultado AS nombre_posible_resultado_subelemento,
                           ti01.id_conf_examen_estab AS id_examen_elemento,
                           ti02.orden AS pb_subelemento_orden
                    FROM lab_elementos  ti01
                    INNER JOIN lab_subelementos      ti02 ON (ti01.id = ti02.idelemento)
                    LEFT  JOIN lab_detalleresultado  ti03 ON (ti02.id = ti03.idsubelemento)
                    LEFT  JOIN lab_detalleresultado  ti04 ON (ti01.id = ti04.idelemento)
                    LEFT  JOIN lab_posible_resultado ti05 ON (ti05.id = ti03.id_posible_resultado)
                    LEFT  JOIN lab_posible_resultado ti06 ON (ti06.id = ti04.id_posible_resultado)
                ) t20 ON (t03.id = t20.id_examen_elemento AND (t17.id = t20.id_resultado_elemento OR t17.id = t20.id_resultado_subelemento))
                /*LEFT JOIN (
                    SELECT ti07.id AS id_elemento_tincion,
                           ti07.elementotincion AS nombre_elemento_tincion,
                           ti11.id AS id_cantidad_tincion,
                           ti11.cantidadtincion AS nombre_cantidad_tincion,
                           ti09.idresultado AS id_resultado_tincion,
                           ti10.id AS id_posible_resultado_tincion,
                           ti10.posible_resultado AS nombre_posible_resultado_tincion,
                           ti08.id_conf_examen_estab AS id_examen
                    FROM lab_elementostincion              ti07
                    INNER JOIN lab_examen_elementostincion ti08 ON (ti07.id = ti08.id_elementostincion)
                    LEFT  JOIN lab_detalleresultado        ti09 ON (ti07.id = ti09.id_elementotincion)
                    LEFT  JOIN lab_posible_resultado       ti10 ON (ti10.id = ti09.id_posible_resultado)
                    LEFT  JOIN lab_cantidadestincion       ti11 ON (ti11.id = ti09.idcantidad)
                ) t21 ON (t03.id = t21.id_examen AND t17.id = t21.id_resultado_tincion)*/
                LEFT JOIN (
                    SELECT ti12.id AS id_procedimiento,
                           ti12.nombreprocedimiento AS nombre_procedimiento,
                           ti12.unidades AS unidad_procedimiento,
                           ti12.rangoinicio AS rango_inicio_procedimiento,
                           ti12.rangofin AS rango_fin_procedimiento,
                           ti13.resultado AS resultado_procedimiento,
                           ti14.id AS id_posible_resultado_procedimiento,
                           ti14.posible_resultado AS nombre_posible_resultado_procedimiento,
                           ti13.observacion AS control_diario_procedimiento,
                           ti13.idresultado AS id_resultado_procedimiento,
                           ti12.id_conf_examen_estab AS id_examen
                    FROM lab_procedimientosporexamen ti12
                    LEFT JOIN lab_detalleresultado   ti13 ON (ti12.id = ti13.idprocedimiento)
                    LEFT JOIN lab_posible_resultado  ti14 ON (ti14.id = ti13.id_posible_resultado)
                ) t22 ON (t03.id = t22.id_examen AND t17.id = t22.id_resultado_procedimiento)
                LEFT JOIN (
                    SELECT ti20.id AS id_bacteria,
                           ti20.bacteria AS nombre_bacteria,
                           ti19.cantidad AS cantidad_bacterias,
                           ti16.id AS id_tarjeta,
                           ti16.nombretarjeta AS nombre_tarjeta,
                           ti18.id AS id_antibiotico,
                           ti18.antibiotico AS nombre_antibiotico,
                           ti21.id AS id_resultado_antibiotico,
                           ti21.resultado AS resultado_antibiotico,
                           ti21.valor AS lectura_antibiotico,
                           ti22.id AS id_posible_resultado_antibiotico,
                           ti22.posible_resultado AS nombre_posible_resultado_antibiotico,
                           ti19.idresultado AS id_resultado
                    FROM lab_tarjetasvitek                ti16
                    INNER JOIN lab_antibioticosportarjeta ti17 ON (ti16.id = ti17.idtarjeta)
                    INNER JOIN lab_antibioticos           ti18 ON (ti18.id = ti17.idantibiotico)
                    LEFT  JOIN lab_detalleresultado       ti19 ON (ti16.id = ti19.idtarjeta)
                    LEFT  JOIN lab_bacterias              ti20 ON (ti20.id = ti19.idbacteria)
                    LEFT  JOIN lab_resultadosportarjeta   ti21 ON (ti19.id = ti21.iddetalleresultado AND ti18.id = ti21.idantibiotico)
                    LEFT  JOIN lab_posible_resultado      ti22 ON (ti22.id = ti21.id_posible_resultado)
                ) t23 ON (t17.id = t23.id_resultado)
                LEFT JOIN lab_observaciones       t24 ON (t24.id = t17.id_observacion)
                LEFT JOIN mnt_empleado            t25 ON (t25.id = t17.idempleado)
                LEFT JOIN lab_estado_rechazo      t26 ON (t26.id = t01.id_estado_rechazo)
                LEFT JOIN lab_posible_observacion t27 ON (t27.id = t01.id_posible_observacion)
                WHERE CASE WHEN :idHistorialClinico::integer != 0
                        THEN t11.id = :idHistorialClinico
                        ELSE t14.id = :idDatoReferencia
                      END
                    AND t02.id_establecimiento_externo = :idEstablecimiento
                ORDER BY t20.pb_elemento_orden, t20.pb_subelemento_orden";

        $stm = $conn->prepare($sql);
        $stm->bindValue(':idHistorialClinico', $idHistorialClinico);
        $stm->bindValue(':idDatoReferencia', $idDatoReferencia);
        $stm->bindValue(':idEstablecimiento', $idEstablecimiento);
        $stm->execute();
        $result = $stm->fetchAll();

        return $result;
    }

    /*
     * DESCRIPCIÓN: Método que obtiene los datos de la solicitud de estudio de laboratorio.
     * PARÁMETROS DE ENTRADA:
     *                  -idExpediente: id del Expediente del paciente
     * RETORNA:
     *                  -Los ids de los historiales clinicos relacionados a solicitudes de examenes de laboratorio clinico.
     */
    public function obtenerIdsSolicitudEstudiosLaboratorio($idExpediente) {
        $em   = $this->getEntityManager();
        $conn = $em->getConnection();
        $where[0] = "";
        $where[1] = "";

        if($idExpediente !== null) {
            $where[0] = "t01.id_numero_expediente = :idExpediente AND";
            $where[1] = "t04.id_numero_expediente = :idExpediente AND";
        }

        $sql = "SELECT CASE WHEN t07.id_solicitud_estudio IS NOT NULL
                           THEN t07.id_solicitud_estudio
                           ELSE t08.id_solicitud_estudio
                       END AS id
                FROM (
                    SELECT t01.id AS id_historial_clinico,
                           MAX(t02.id) AS id_solicitud_estudio
                    FROM sec_historial_clinico        t01
                    INNER JOIN sec_solicitudestudios  t02 ON (t01.id = t02.id_historial_clinico)
                    INNER JOIN lab_tiposolicitud      t03 ON (t03.id = t02.idtiposolicitud)
                    WHERE $where[0] t03.id = 1
                    GROUP BY t01.id
                ) AS t07
                FULL  JOIN (
                    SELECT t04.id AS id_historial_clinico,
                           MAX(t05.id) AS id_solicitud_estudio
                    FROM sec_historial_clinico        t04
                    INNER JOIN sec_solicitudestudios  t05 ON (t04.id = t05.id_historial_clinico)
                    INNER JOIN lab_tiposolicitud      t06 ON (t06.id = t05.idtiposolicitud)
                    WHERE $where[1] t06.id = 2
                    GROUP BY t04.id
                ) t08 ON (t07.id_historial_clinico = t08.id_historial_clinico)";

        $stm = $conn->prepare($sql);

        if($idExpediente !== null) {
            $stm->bindValue(':idExpediente', $idExpediente);
        }

        $stm->execute();
        $result = $stm->fetchAll();

        return $result;
    }
}
